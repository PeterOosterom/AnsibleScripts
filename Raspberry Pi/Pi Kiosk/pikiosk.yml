---
  - name: Create raspberry pi kiosk
    hosts: "{{ target_host }}"
    become: yes
    become_user: root
    vars_prompt:
      - name: confirm_target
        prompt: "Is '{{ target_host }}' the correct target host? (yes/no)"
        private: no
    tasks:

      - name: Confirm target host
        fail:
          msg: "Aborted playbook execution. Confirm target host before proceeding."
        when: confirm_target != "yes"

      - name: Install Chromium,unclutter,rsync,wget,xdotool and Xvfb if not already installed
        apt:
          name: 
            - chromium-browser #browser
            - xvfb #creates a virtualframbuffer to initialize chrome
            - unclutter #removes mousepointer
            - xdotool #to change tabs in chrom
            - rsync #for log2ram
            - wget #to install log2ram
          state: latest

      - name: Create the autostart directory if it doesn't exist
        file:
          path: /etc/xdg/lxsession/LXDE-pi
          state: directory
          mode: '0755'
        become: yes

      - name: Create the autostart file
        template:
          src: templates/autostart.j2
          dest: /etc/xdg/lxsession/LXDE-pi/autostart
        become: yes     

      - name: Create the xdotool file
        template:
          src: templates/xdotool.j2
          dest: /etc/xdg/lxsession/LXDE-pi/xdotool.sh
        become: yes 

      - name: Make the xdotool file executable
        file:
          path: /etc/xdg/lxsession/LXDE-pi/xdotool.sh
          mode: "0755"
        become: yes

      - name: Check if X11 or Xvfb is running
        command: pgrep -f "Xorg|Xvfb"
        register: x11_status
        ignore_errors: yes
        changed_when: false  # We don't want to treat this as a change

      - name: Start Xvfb on a different display if X11 is running
        command: Xvfb :1 -screen 0 1280x1024x16 -ac
        async: 1
        poll: 0
        register: xvfb_result
        changed_when: false
        when: x11_status.stdout is not defined

      - name: Wait for Xvfb to start (adjust sleep time as needed)
        wait_for:
          timeout: 60
          state: started
        when: x11_status.stdout is not defined

      - name: Set DISPLAY variable for Chromium
        set_fact:
          display_var: "{{ 'DISPLAY=:1' if x11_status.stdout is not defined else 'DISPLAY=:0' }}"
        delegate_to: localhost
        
      - name: Launch Chromium to create config files
        become: yes
        become_user: "{{ kiosk_user }}"
        command: chromium-browser
        environment:
          DISPLAY: "{{ display_var }}"
        async: 10
        poll: 0
        ignore_errors: yes


      - name: Wait for Chromium to launch (adjust sleep time as needed)
        pause:
          seconds: 10

      - name: Kill Chromium to prevent interference
        shell: pkill chromium-browser || true

      - name: Update Chromium Preferences
        become_user: pi
        command: >
          sed -i 's/"exited_cleanly":false/"exited_cleanly":true/'
          /home/{{ kiosk_user }}/.config/chromium/Default/Preferences

      - name: Update Chromium Preferences (exit_type)
        become_user: pi
        command: >
          sed -i 's/"exit_type":"Crashed"/"exit_type":"Normal"/'
          /home/{{ kiosk_user }}/.config/chromium/Default/Preferences       

      - name: Add gpg key
        shell: 
          cmd: >
            curl -fsSL {{ log2ram_gpg }} | gpg --dearmor --yes -o {{ log2ram_keyring }}
          creates: "{{ log2ram_keyring }}"
                
      - name: Add log2ramapt repository
        apt_repository:
          repo: "{{ log2ram_apt_repository }}"
          filename: log2ram
        register: log2ram_apt_repo

      - name: Update apt cache
        apt:
          update_cache: true
        when: log2ram_apt_repo is changed

      - name: Install log2ram
        apt:
          name: log2ram
        notify: Restart log2ram

      - name: Set log2ram config options
        lineinfile:
          path: /etc/log2ram.conf
          regexp: "{{ item.regexp }}"
          line: "{{ item.line }}"
          backrefs: true
        loop:
          - {regexp: '^SIZE=(.*)$', line: 'SIZE={{ log2ram_size }}'}
          - {regexp: 'USE_RSYNC=(.*)$', line: 'USE_RSYNC={{ log2ram_use_rsync }}'}
          - {regexp: '^MAIL=(.*)$', line: 'MAIL={{ log2ram_mail }}'}
          - {regexp: '^PATH_DISK=(.*)$', line: 'PATH_DISK="{{ log2ram_path_disk }}"'}
          - {regexp: '^ZL2R=(.*)$', line: 'ZL2R={{ log2ram_use_z2lr|lower }}'}
          - {regexp: '^COMP_ALG=(.*)$', line: 'COMP_ALG={{ log2ram_comp_alg }}'}
          - {regexp: '^LOG_DISK_SIZE=(.*)$', line: 'LOG_DISK_SIZE={{ log2ram_log_disk_size }}'}
        notify: Restart log2ram

      - name: Reboot host and wait for it to restart
        reboot:
          msg: "Reboot initiated by Ansible"
          connect_timeout: 5
          reboot_timeout: 600
          pre_reboot_delay: 0
          post_reboot_delay: 30
          test_command: whoami
      
      - name: Set the maximum log size
        command: sudo perl -pe 's/^#?SystemMaxUse=.*$/SystemMaxUse=20M/g' -i /etc/systemd/journald.conf

      - name: Restart Journald
        command: sudo systemctl restart systemd-journald

      - name: Clean old logs
        command: sudo journalctl --vacuum-size=16M

    handlers:
          - name: Restart log2ram
            systemd:
              name: log2ram
              state: restarted
